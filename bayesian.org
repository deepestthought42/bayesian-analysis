


(defclass )


(defmethod fisher-information-matrix ((model model) &key (epsilon long-float-epsilon))
  (let+ (((&slots log-of-all-priors log)))
    ()))

(defun test-approx-hessian ()
  (let+ ((model (make-instance 'quadratic))
	 (data (initialize-from-source '1d-data t))
	 (result (solve-for-parameters (make-instance 'levenberg-marquardt) model data))
	 ((&slots result-model iterations) result)
	 (covar (covariance-matrix (first iterations)))
	 ((&slots log-of-all-priors) result-model)
	 (likelihood (initialize-likelihood result-model data))
	 ((&slots varying/log-of-likelihood constant/log-of-likelihood) likelihood))
    (labels ((fun ()
	       (+
		(funcall varying/log-of-likelihood)
		(funcall constant/log-of-likelihood)
		(funcall log-of-all-priors))))
      (let ((res
	      (math-utils:invert-matrix
	       (hessian #'fun result-model
			(get-optimal-delta result-model)))))
	(values res
		(iter outer
		  (with (dim-j dim-k) = (array-dimensions covar))
		  (for j from 0 below dim-j)
		  (iter
		    (for k from 0 below dim-k)
		    (in outer
			(collect (+ (aref covar j k)
				    (aref res j k)))))))))))


(test-approx-hessian)







