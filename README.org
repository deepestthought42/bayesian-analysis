* Bayesian Analysis
This is a lisp package to specify a model and calculate posterior distributions as well as
odds ratios using Bayesian statistics, most notably a simple implementation of the
Metropolis-Hastings algorithm. It is based on Gregory's excellent book on the topic [fn:1]
of Bayesian data analysis.


While this library is research quality, it is good enough for my own use -- I give, of
course, no guarantee on correctness.

** Toy problem, setup
That being said, let's say you have some spectral line data (this problem is a slightly
changed copy of a problem from [fn:1], Chapter 3) and want to answer some questions about
it. So, first we load /bayesian-analysis/ and define a package (and directory, this needs to
be adjusted for other diectory structures) to work in [fn:2].

#+BEGIN_SRC lisp :results none
(ql:quickload :bayesian-analysis)
(ql:quickload :let-plus)
(ql:quickload :iterate)
(ql:quickload :infix-math)

(defpackage #:bayesian-example
  (:use :cl :iterate :let-plus))

(in-package #:bayesian-example)

;; set to my copy of the repository to be able to easily create this document (mainly the
;; plots)
(defparameter *dir* "/home/renee/phd/src/penning-analysis.project/bayesian-analysis/")
#+END_SRC

Then let us define a plot macro to make life a bit easier:

#+BEGIN_SRC lisp :results none :in-package :bayesian-example
(defmacro plot ((&key file-name
		      (terminal-options "enhanced font 'Georgia,10' dashed")
		      ;; this seems to be a good value for github
		      (size "860,450"))
		(&rest other-gnuplot-commands)
	&body data/options)
  `(labels ((cmd (fmt-str &rest args)
	      (mgl-gnuplot:command (apply #'format nil fmt-str args))))
     (mgl-gnuplot:with-session ()
       (cmd "reset")
       ,@(if file-name
	     `((cmd "set output '~a/~a'" ,*dir* ,file-name)
	       (cmd "set terminal png size ~a ~a" ,size ,terminal-options))
	     `((cmd "set terminal wxt ~a" ,terminal-options)))
       ,@(iter
	   (for c in other-gnuplot-commands)
	   (typecase c
	     (string (collect `(cmd ,c)))
	     (list (collect `(cmd ,@c)))
	     (t (error "Do not know how to handle command: ~a" c))))
       (mgl-gnuplot:plot*
	(list
	 ,@(iter
	     (for (data opt) in data/options)
	     (for options = (if opt opt "with lines lc 0 title ''"))
	     (collect `(mgl-gnuplot:data* ,data ,options))))) 
       (cmd "unset output"))
     (format t "~a" ,file-name)))

(defun normalize-to-one (x/y-s)
  (let+ ((max (reduce #'max x/y-s :key #'second)))
    (mapcar #'(lambda (x/y) (list (first x/y) (/ (second x/y) max))) x/y-s)))

#+END_SRC

With that, define the data given in [fn:1]:

#+BEGIN_SRC lisp :results none :in-package :bayesian-example
(defparameter example-data
  '((1 1.42) (2 0.468) (3 0.762) (4 1.312) (5 2.029) (6 0.086) (7 1.249) (8 0.368)
    (9 0.657) (10 1.294) (11 0.235) (12 0.192) (13 0.269) (14 0.827) (15 0.685) (16 0.702)
    (17 0.937) (18 1.331) (19 1.772) (20 0.53) (21 0.33) (22 1.205) (23 1.613) (24 0.3)
    (25 0.046) (26 0.026) (27 0.519) (28 0.924) (29 0.23) (30 0.877) (31 0.65) (32 1.004)
    (33 0.248) (34 1.169) (35 0.915) (36 1.113) (37 1.463) (38 2.732) (39 0.571) (40 0.865)
    (41 0.849) (42 0.171) (43 1.031) (44 1.105) (45 0.344) (46 0.087) (47 0.351) (48 1.248)
    (49 0.001) (50 0.36) (51 0.497) (52 0.072) (53 1.094) (54 1.425) (55 0.283) (56 1.526)
    (57 1.174) (58 0.558) (59 1.282) (60 0.384) (61 0.12) (62 0.187) (63 0.646) (64 0.399)))
#+END_SRC

And then plot it:

#+BEGIN_SRC lisp :results output file :exports both
(in-package :bayesian-example)

(plot (:file-name "example/just-plot.png")
    ("set xlabel 'channel #'" "set ylabel 'temp. [mK]'" "set xrange [1:64]")
  (example-data "with points pt 7 lc 7 title ''")
  (example-data "with histeps lc 7 title ''"))
#+END_SRC

#+RESULTS:
[[file:example/just-plot.png]]

Ok, looks good. To do some analysis on it with the /bayesian-analysis/ package, we need to
cast the data into a form the library understands:

#+BEGIN_SRC lisp :results none :package :bayesian-example
(ba:define-data-class toy-data (ch "channel number") (mK "temperature") () (obj (source list))
  (let ((dim (length source)))
    (setf ch (make-array dim :element-type 'double-float)
	  mK (make-array dim :element-type 'double-float))
    (iter
      (for (x y) in-sequence source with-index i)
      (setf (aref ch i) (coerce x 'double-float)
	    (aref mK i) (coerce y 'double-float)))))
#+END_SRC

/ba:define-data-class/ is a convenience macro that defines a subclass of /ba:data/ and the
methods (interface in OOP parlance) necessary to use it - specifically a method to
initialize an object of type /toy-data/ from a simple list of the form /{x, y}*/.

** Toy problem, model definition
Gregory specifies two models that he compares to each other, one where we assume that
there is *no line* in the data, and one where we assume there is a *line* with the following
shape:
#+BEGIN_SRC latex :results output raw graphics :file example/lineshape.png :exports results
\begin{equation*}
  f(\nu_i) = T\exp{\left\{ - \frac{(\nu_i-\nu_0)^{2}}{2\sigma^2_L} \right\}}
\end{equation*}
#+END_SRC

#+RESULTS:
[[file:example/lineshape.png]]

Where it is assumed that the line has a width of $\sigma_L=\SI{2}{ch}$ and the line is
predicted to appear in the spectrum at around $\nu_0=37$. Furthermore, all channel have
Gaussian noise specified to have $\sigma = \SI{1}{mK}$.

To express these two models using /bayesian-analysis/, we simply write:
#+BEGIN_SRC lisp :results none :in-package :bayesian-example
(use-package :infix-math)

(ba:define-bayesian-model (line toy-data)
    ((Τ :default 2 :prior :jeffreys :marginalize t :min 5e-2 :max 100 :sample-sigma 0.5)
     (ν₀ :default 37 :prior :uniform :marginalize t :min 1 :max 64 :sample-sigma 2.5)
     (σₗ :default (/ 2 (log 2))))
    (:d_i=f_i+gaussian_error_1_equal_sigma :equal-sigma-parameter (sigma :default 1))
    ((νᵢ) ($ Τ * (exp (- (νᵢ - ν₀) ^ 2 / (2 * σₗ ^ 2))))))
    #+END_SRC

The model definition also already specified a choice and range of priors. Here $T$ is a
scale parameter and best described using a Jeffreys prior (see below). By default
parameters $T, \nu_0$ are marginalized over. The defintion of the model also specifies
default values for the MCMC samplers. All of the parameters and default values can be
overwritten when instanciating the model. We also specifiy that all data has an error that
follows a gaussian distribution (/:d_i=f_i+gaussian_error_1_equal_sigma/) with $\sigma=1$.

** Toy problem, analysis
and with that, we can first find an optimal solution using MCMC:
#+BEGIN_SRC lisp :results none
(in-package :bayesian-example)

(defparameter *mcmc-result* (ba:find-optimum (make-instance 'ba:metropolis-hastings :no-iterations 200000)
					     (make-instance 'line)
					     (ba:initialize-from-source 'toy-data t)))

(defparameter *mcmc-result-uniform*
  (ba:find-optimum (make-instance 'ba:metropolis-hastings :no-iterations 200000)
		   (make-instance 'line :temperature-prior :uniform)
		   (ba:initialize-from-source 'toy-data t)))
#+END_SRC

plot, and compare to an integrated solution:

#+BEGIN_SRC lisp :results output file :exports both
(in-package :bayesian-example)

(let+ ((p-res (ba:get-parameter-results *mcmc-result* :start 2000 :no-bins 200))
       ((&slots ba:binned-data) (ba:get-parameter-info p-res 'ν₀)))
  (plot (:file-name "example/nu0.png")
      ("set yrange [0:1.1]" "set xrange [1:64]"
       "set xlabel 'Channel #'"
       "set ylabel 'Posterior for T [arb.]'")
    ((normalize-to-one
      (ba::parameter-pdf-integrate '(ν₀ 1d0 64d0) 200 '((Ⲧ 1d-1 5d0))
				   (make-instance 'line)
				   (ba:initialize-from-source 'toy-data example-data)
				   :normalize t))
     "with lines lc 7 lw 2 dt 1 title 'Integrated result'")
    ((normalize-to-one ba:binned-data) "with histeps lc 0 title 'MCMC result'")))
#+END_SRC

#+RESULTS:
[[file:example/nu0.png]]

#+BEGIN_SRC lisp



(let+ ((p-res (ba:get-parameter-results *mcmc-result* :start 2000 :no-bins 75))
       ((&slots ba:binned-data) (ba:get-parameter-info p-res 'temperature))
       (p-res-uniform (ba:get-parameter-results *mcmc-result-uniform* :start 2000 :no-bins 75))
       ((&slots (binned-data-uniform ba:binned-data))
	(ba:get-parameter-info p-res-uniform 'temperature)))
  (plot () ("set yrange [0:1.1]")
    ((normalize-to-one
      (ba::parameter-pdf-integrate '(temperature 1d-1 5d0) 200 '((ν₀ 1d0 64d0))
				   (make-instance 'line)
				   (ba:initialize-from-source 'toy-data t)
				   :normalize t))
     "with lines lc 7 lw 2 dt 1 title 'Integrated result'")
    ((normalize-to-one ba:binned-data) "with histeps lc 0 title 'MCMC result'")
    ((normalize-to-one
      (ba::parameter-pdf-integrate '(temperature 1d-1 5d0) 200 '((ν₀ 1d0 64d0))
				   (make-instance 'line :temperature-prior :uniform)
				   (ba:initialize-from-source 'toy-data t)
				   :normalize t))
     "with lines lc 9 lw 1.5 dt 1 title 'Integrated result -- Uniform prior'")
    ((normalize-to-one binned-data-uniform) "with histeps lc 3 title 'MCMC result -- Uniform prior'")))









(labels ((cmd (fmt-str &rest args)
	   (mgl-gnuplot:command (apply #'format nil fmt-str args))))
  (mgl-gnuplot:with-session ()
    (cmd "reset")
    (cmd "set terminal wxt enhanced font 'Georgia,8' dashed")
    (ba:plot-iteration-values
     (ba:find-optimum (make-instance 'ba:metropolis-hastings :no-iterations 100000)
		      (make-instance 'line)
		      (ba:initialize-from-source 'toy-data t))
     :every 20 :params-to-plot '(temperature)
     :other-plot-options "lc 0")
    (cmd "unset output")))



(let+ ((data (ba:initialize-from-source 'toy-data t))
       (model (make-instance 'line)))
  (plot () ()
    ((ba::parameter-pdf-integrate '(temperature 1d-1 5d0) 200 '((ν₀ 1d0 64d0))
				  model data :normalize t)
     "with lines lc 0 dt 1 title 'Uniform prior'")))









#+END_SRC


(ba:define-bayesian-model (no-line toy-data) ()
    (:d_i=f_i+gaussian_error_1_equal_sigma
     :equal-sigma-parameter (sigma :default 1d0))
    ((x) 0d0))

* Footnotes
[fn:1] /Bayesian Logical Data Analysis for the Physical Sciences/, Cambridge University
  Press, 2005, https://doi.org/10.1017/CBO9780511791277

[fn:2] Within a properly setup emacs + slime or sly, and given that quicklisp knows about
bayesian-analysis using for example https://github.com/deepestthought42/with-project-dir,
this org-mode file can be executed directly

